import { Maybe } from '../definitions';
import { O } from './observable';
declare type Operator<In, Out> = (input: O<In>) => O<Out>;
declare const throttle: <T>(defer?: (callback: VoidFunction) => void) => (input: O<T>) => O<T>;
declare const map: <From, To>(fnOrValue: To | ((value: From) => To)) => (input: O<From>) => O<To>;
declare const tap: <T>(fn: (value: T) => void) => (input: O<T>) => O<T>;
declare const scan: <Memo, Value>(fn: (memo: Memo, value: Value) => Memo, init: Memo) => (input: O<Value>) => O<Memo>;
declare const filter: <T>(fn: (value: T) => boolean) => (input: O<T>) => O<T>;
declare const rememberLast: <T>(init?: Maybe<T>) => (input: O<T>) => O<Maybe<T>>;
export { type Operator, throttle, map, tap, scan, filter, rememberLast };
